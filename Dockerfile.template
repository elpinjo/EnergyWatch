# base-image for node on any machine using a template variable,
# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/
# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-buildpack-deps:jessie-curl

#Get python installed
RUN apt-get update && apt-get install -yq \
   python build-essential && \
   apt-get clean && rm -rf /var/lib/apt/lists/*

#Get latest Node-JS
RUN cd /tmp && wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-armv6l.tar.xz && xz -d -c node-v8.9.4-linux-armv6l.tar.xz | tar xf - && mv node-v8.9.4-linux-armv6l/* /usr/local  && rm -rf node-v8.9.4-linux-armv6l

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Enable systemd init system in container
ENV INITSYSTEM on

# server.js will run when container starts up on the device
CMD ["npm", "start"]
